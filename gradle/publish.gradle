task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhToken")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Couchmove'
                packaging = 'jar'
                description = 'Couchbase data migration tool for Java'
                url = 'https://github.com/differentway/couchmove'

                scm {
                    connection = 'scm:git:git@github.com:differentway/couchmove.git'
                    developerConnection = 'scm:git:git@github.com:differentway/couchmove.git'
                    url = 'git@github.com:differentway/couchmove.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'tchlyah'
                        name = 'Tayeb Chlyah'
                        email = 'tayebchlyah@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
